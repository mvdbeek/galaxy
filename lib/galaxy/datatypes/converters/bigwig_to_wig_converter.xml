<tool id="bigwigtowig" name="bigWigToWig" version="@TOOL_VERSION@+galaxy@SUFFIX_VERSION@" profile="20.01">
    <description>Convert bigWig to wig</description>
    <xml name="requirements">
        <token name="@TOOL_VERSION@">377</token>
        <token name="@SUFFIX_VERSION@">0</token>
        <requirements>
            <requirement type="package" version="@TOOL_VERSION@">ucsc-bigwigtowig</requirement>
        </requirements>
    </xml>
    <command detect_errors="exit_code"><![CDATA[
        bigWigToWig '${bigwig_input}'
        #if $chrom
            -chrom='${chrom}'
        #end if
        #if $start
            -start=$start
        #end if
        #if $end
            -end=$end
        #end if
        output.wig
    ]]></command>
    <inputs>
        <param name="bigwig_input" type="data" format="bigwig" label="BigWig input"/>
        <param argument="-chrom" type="text" value="" optional="true" label="Restrict output to given chromosome" help="Optional parameter. If set restrict output to given chromosome">
            <sanitizer invalid_char="">
                <valid initial="string.letters,string.digits">
                    <add value="+" />
                    <add value="-" />
                    <add value=" " />
                    <add value="_" />
                </valid>
            </sanitizer>
            <validator type="regex">[A-Za-z0-9 -_+]+</validator>
        </param>
        <param argument="-start" type="integer" min="0" optional="true" label="Restrict output to only that over start" help="Optional parameter. If set, restrict output to only that over start" />
        <param argument="-end" wig_to_bigwig.xmltype="integer" min="0" optional="true" label="Restict output to only that under end" help="Optional parameter. If set, restict output to only that under end" />
    </inputs>
    <outputs>
        <data name="wig_output" format="wig" from_work_dir="output.wig" label="${tool.name} on ${on_string}: wig"/>
    </outputs>
    <tests>
        <!--Test 01 -->
        <test expect_num_outputs="1">
            <param name="bigwig_input" value="2.bigwig"/>
            <output name="wig_output" value="test01_output.wig" ftype="wig"/>
        </test>
        <!--Test 02 -->
        <test expect_num_outputs="1">
            <param name="bigwig_input" value="2.bigwig"/>
            <param name="chrom" value="chr21"/>
            <output name="wig_output" value="test02_output.wig" ftype="wig"/>
            <assert_command>
                <has_text text="-chrom=chrm21"/>
            </assert_command>
        </test>
        <!--Test 03 -->
        <test expect_num_outputs="1">
            <param name="bigwig_input" value="2.bigwig"/>
            <param name="start" value="100"/>
            <output name="wig_output" value="test03_output.wig" ftype="wig"/>
        </test>
        <!--Test 04 -->
        <test expect_num_outputs="1">
            <param name="bigwig_input" value="2.bigwig"/>
            <param name="end" value="100"/>
            <output name="wig_output" value="test04_output.wig" ftype="wig"/>
        </test>
    </tests>
    <help><![CDATA[

.. class:: infomark

**Purpose**

bigWigToWig - Convert bigWig to wig.  This will keep more of the same structure of the
original wig than bigWigToBedGraph does, but still will break up large stepped sections
into smaller ones.

Usage:
   bigWigToWig in.bigWig out.wig

Options:
   - chrom=chr1 - if set restrict output to given chromosome
   - start=N - if set, restrict output to only that over start
   - end=N - if set, restict output to only that under end
   - udcDir=/dir/to/cache - place to put cache for remote bigBed/bigWigs

    ]]></help>
    <citations>
        <citation type="bibtex">
            @misc{githubKent,
            author = {Kent, Jim},
            year = {2021},
            title = {bigwigtowig},
            publisher = {GitHub},
            journal = {GitHub repository},
            url = {https://github.com/ucscGenomeBrowser/kent}}
        </citation>
    </citations>
</tool>
